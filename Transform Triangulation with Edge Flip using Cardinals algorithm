import sage.graphs.genus
import random
import statistics


#Triangulation Class
class Triangulation:
    
    #constructor
    def __init__(self, cyclic_list):
        self.vertices = set(list(cyclic_list.keys()))
        self.cyclic_list = cyclic_list.copy()
        self.edges = self.edges_from_cyclic_list(self.cyclic_list)
        
        [faces, edge_to_face_map] = self.create_face(self.cyclic_list)
        self.faces = faces
        self.__edge_to_face_map = edge_to_face_map
        self.external_face = faces[0]
        
        self.g = self.create_graph(self.cyclic_list, self.edges)
        
    
    def edges_from_cyclic_list(self, cyclic_list):
        edges = []
        for v in self.vertices:
            for u in cyclic_list[v]:
                lst = [v,u]
                lst.sort()
                edge = (lst[0],lst[1])
                if not(edge in edges):
                    edges.append(edge)
            
        return edges
    
    
    def create_face(self, cyclic_list):
        faces = []
        edge_to_face_map = {}
        for v in self.vertices:
            for i in range(len(cyclic_list[v])):
                u = cyclic_list[v][i]
                w = cyclic_list[v][(i+1)%len(cyclic_list[v])]
                face = [u,v,w]
                face.sort()
                if not(face in faces):
                    faces.append(face)
                    if (face[0],face[1]) in edge_to_face_map:
                        edge_to_face_map[face[0],face[1]].append(face)
                    else:
                        edge_to_face_map[(face[0],face[1])] = [face]
                    
                    if (face[0],face[2]) in edge_to_face_map:
                        edge_to_face_map[face[0],face[2]].append(face)
                    else:
                        edge_to_face_map[(face[0],face[2])] = [face]
                        
                    if (face[1],face[2]) in edge_to_face_map:
                        edge_to_face_map[face[1],face[2]].append(face)
                    else:
                        edge_to_face_map[(face[1],face[2])] = [face]
                        
                    
            
                    
        return faces,edge_to_face_map
    
    def create_graph(self, cyclic_list, edges):
        g = Graph()
        g.add_vertices(self.vertices)
        g.add_edges(edges)
        external_edge = (self.external_face[0],self.external_face[1])
        g.set_embedding(cyclic_list)
        
        self.pos = g.layout(layout='planar', set_embedding = False)
        g.genus()
        self.cyclic_list = g.get_embedding()
        self.rev_cyclic_list()
        
#         print(g.get_embedding())
        g.set_pos(self.pos)
        return g
    
    def rev_cyclic_list(self):
        for i in list(self.cyclic_list.keys()):
            self.cyclic_list[i] = self.cyclic_list[i][::-1]
        
    
    def flip_edge(self, a, b):
        if a > b:
            temp = a
            a = b
            b = temp
        if ((a,b) in self.__edge_to_face_map) == False:
            print(str(a) + "," + str(b) + " this edge does not exist")
            return
        [f1, f2] = self.__edge_to_face_map[a,b]
#         print(str(f1) + " " + str(f2))
        
        [a1,b1] = self.get_oposite_vertices(f1, f2, a, b)
#         print(str(a1) + " " + str(b1))
        if a1 > b1:
            temp = a1
            a1 = b1
            b1 = temp
        if (a1,b1) in self.__edge_to_face_map:
            print("New edge " +str(a1) + "," + str(b1) + " already exist")
            return
        
#         Remove of edge (a,b)
        self.g.delete_edge(a,b)
        self.edges.remove((a,b))
        self.__edge_to_face_map.pop((a,b))
        self.faces.remove(f1)
        self.faces.remove(f2)
        
#         self.cyclic_list[a] = self.cyclic_list[a].remove(b)
#         self.cyclic_list[b] = self.cyclic_list[b].remove(a)
        
        
        #for new edge a1,b1
        self.g.add_edge(a1,b1)
        self.edges.append((a1,b1))
# #         for a1
#         index_of_a = self.cyclic_list[a1].index(a)
#         index_of_b = self.cyclic_list[a1].index(b)
#         mx = max(index_of_a,index_of_b)
#         self.cyclic_list[a1] = self.cyclic_list[a1].insert(mx, b1)
        
# #         for b1
#         index_of_a = self.cyclic_list[b1].index(a)
#         index_of_b = self.cyclic_list[b1].index(b)
#         mx = max(index_of_a,index_of_b)
#         self.cyclic_list[b1] = self.cyclic_list[b1].insert(mx, a1)
        self.reform()
        
        
        
        [faces, edge_to_face_map] = self.create_face(self.cyclic_list)
        self.faces = faces
        self.__edge_to_face_map = edge_to_face_map
        
        return [a,b]
        
        
    
    
    def get_oposite_vertices(self, f1, f2, a, b):
        a1 = int(set(f1).difference({a,b}).pop())
        b1 = int(set(f2).difference({a,b}).pop())
        return [a1,b1]
    
    def reform(self):
        self.pos = self.g.layout(layout="planar", set_embedding = True)
        self.g.set_pos(self.pos)
        self.g.genus()
        self.cyclic_list = self.g.get_embedding()
        
        self.rev_cyclic_list()
        temp_cyclic_list = self.cyclic_list.copy()
        self.pos = self.g.layout(layout="planar", set_embedding = False)
        self.g.set_pos(self.pos)
        self.cyclic_list = temp_cyclic_list.copy()
        
        
#         print(self.cyclic_list)
        return
    
    
    def check_cyclic_list(self, c):
        if not(len(c) == len(self.cyclic_list)):
            print("Length does not match")
            print("expected --->" + str(len(self.cyclic_list)))
            print("found ---> " + str(len(c)))
            
        for key1 in list(c.keys()):
            if not (key1 in self.vertices):
                print("Change in keys")
                print(str(key1) + " not found")
                return
            index = self.cyclic_list[key1].index(c[key1][0])
            if not(len(c[key1]) == len(self.cyclic_list[key1])):
                print("change in mapping")
                print("expected --> " + str(self.cyclic_list[key1]))
                print("found --> " +str(c[key1]))
                return
            for i in c[key1]:
                if not(i==self.cyclic_list[key1][index]):
                    print("change in mapping")
                    print("expected --> " + str(key1) + ":" + str(self.cyclic_list[key1]))
                    print("found --> " + str(key1) + ":"  +str(c[key1]))
                    return
                index = (index+1)%len(c[key1])
        
        
        print("No changes")
        
    
    def copy(self):
        t2 = Triangulation(self.cyclic_list)
        t2.set_external_face(self.external_face)
        return t2
    
    def set_external_face(self,ef):
        self.external_face = ef
    
    def remove_vertices(self,vertices):
        self.g.delete_vertices(vertices)
        self.g.genus()
        self.cyclic_list = self.g.get_embedding()
        self.rev_cyclic_list()
        
        
    
    def sub_triangulation(self,vertices):
        t1 = self.copy()
        extra_vertices = t1.vertices
        for i in vertices:
            extra_vertices.remove(i)
        t1.remove_vertices(extra_vertices)
        return t1
    
    
    def get_edge_face_map(self, a, b):
        if a > b:
            temp = a
            a = b
            b = temp
        return self.__edge_to_face_map[a,b]
    
    
    def get_faces_of_edge(self, a, b):
        if a > b:
            temp = a
            a = b
            b = temp
        if ((a, b) in self.__edge_to_face_map) == False:
            print(str(a) + "," + str(b) + " this edge does not exist")
            return
        return self.__edge_to_face_map[a,b]
    
    def remove_face_of_edge(self, a, b, rface):
        if a > b:
            temp = a
            a = b
            b = temp
        self.__edge_to_face_map[a,b].remove(rface)
        return
    
    def add_face_of_edge(self, a, b, rface):
        if a > b:
            temp = a
            a = b
            b = temp
        self.__edge_to_face_map[a,b].append(rface)
        return



#Random Triangulation Generator
class RandomTriangulation:
#     def __init__(self, num_of_vertices):
#         slef.V = num_of_vertices

    def generate_triangulation(self, num_of_vertices):
        g = Graph()
        vertices = list(range(1,num_of_vertices+1))
        all_edges = self.all_possible_edges(vertices)
        self.vertices = vertices.copy()
        external_face = []
        predetermined_pos = [[100,50], [150,500], [500,200]]
        cen = [250,250]
        radious = 100
        pos = {}
        length = num_of_vertices-1
        
        for i in range(3):
            if length==1:
                v_num = 0
            else:
                v_num = random.randint(1,length)
            v = vertices[v_num]
            g.add_vertex(v)
            external_face.append(v)
            pos[v] = predetermined_pos[i]
            vertices.remove(v)
            length = length-1
        
        edges = []

        deg_diff = 360/len(vertices)
        deg = 0
        
        rad = radious/2
        rad_diff = (radious/len(vertices))/2
        
        rad = radious
        rad_diff = 0
        
        
        while(len(vertices) != 0):
            if length<2:
                v_num = 0
            else:
                v_num = random.randint(1,length)
            v = vertices[v_num]
            vertices.remove(v)
            length = length-1
            g.add_vertex(v)
            
#             100*math.sin(deg)
            x = ceil(cen[0] + rad * math.cos(deg*math.pi/180))
            y = ceil(cen[1] + rad * math.sin(deg*math.pi/180))
        
            deg = deg+deg_diff
            rad = rad+rad_diff
            pos[v] = [x,y]
        
        
        
        g.set_pos(pos)
        self.pos = pos
        
        
        while (len(all_edges) != 0):
            if len(all_edges) < 2:
                edge_num = 0
            else:
                edge_num = random.randint(0,len(all_edges)-1)
            
            edge = all_edges[edge_num]
  
            all_edges.remove(edge)
            all_edges = self.delete_invalid_edges(all_edges, edge)
            edges.append(edge)
        
        g.add_edges(edges)
        self.g = g
        
        self.g.genus()
        self.cyclic_list = self.g.get_embedding()
        self.rev_cyclic_list()
        return self.cyclic_list

    
    def rev_cyclic_list(self):
        for i in list(self.cyclic_list.keys()):
            self.cyclic_list[i] = self.cyclic_list[i][::-1]
    
    def delete_invalid_edges(self, all_edges, edge):
        x = edge[0]
        y = edge[1]
        delete_edge_list = []
        
        for i in range(len(all_edges)):
            edge1 = all_edges[i]
            x1 = edge1[0]
            y1 = edge1[1]
            
            px = self.pos[x].copy()
            
            px1 = self.pos[x1].copy()
            
            py = self.pos[y].copy()
            
            py1 = self.pos[y1].copy()
            
            if not(x==x1 or x==y1 or y==x1 or y==y1):
                if(self.intersect(px, py, px1, py1)):
                    delete_edge_list.append(edge1)
        
        for i in range(len(delete_edge_list)):
            all_edges.remove(delete_edge_list[i])
        
        return all_edges
            
    
    def all_possible_edges(self, vertices):
        all_edges = []
        for i in range(1, len(vertices)+1):
            for j in range(i+1, len(vertices)+1):
                all_edges.append((i,j))
        
        return all_edges
    
    
    
    def intersect(self,A,B,C,D):
        return self.ccw(A,C,D) != self.ccw(B,C,D) and self.ccw(A,B,C) != self.ccw(A,B,D)
    
    def ccw(self,A,B,C):
        return (C[1]-A[1]) * (B[0]-A[0]) > (B[1]-A[1]) * (C[0]-A[0])





#Cardinal Class
class Cardinal: 
#     def __init__(self):
#         print("Cardinal")


    def show_transformation(self, t1, t2):
        h1 = t1.g.hamiltonian_cycle(algorithm='backtrack')
        h2 = t2.g.hamiltonian_cycle(algorithm='backtrack')
        
        if not(h1[0] and h2[0]):
            return 0
        
        h_cycly1 = h1[1]
        h_cycly2 = h2[1]
  
        t1_flip_seq = self.hamiltonian_to_canonical(t1, h_cycly1)
        t2_flip_seq = self.hamiltonian_to_canonical(t2, h_cycly2)
        
        return (len(t1_flip_seq) + len(t2_flip_seq))
        
    
    def hamiltonian_to_canonical(self, t, h_cycle):
        g1 = {}
        g2 = {}
        
        flip_seq = []
        h_cycle_edges = []
        for i in range(len(h_cycle)):
            j = (i+1)%len(h_cycle)
            x = h_cycle[i]
            y = h_cycle[j]
            if x>y:
                [x,y] = self.swap(x,y)    
            edge = (x,y)
            h_cycle_edges.append(edge)
            
        
        for i in range(len(h_cycle)):
            start_i = (i+1)%len(h_cycle)
            end_i = i-1
            if end_i==-1:
                end_i = len(t.vertices)-1
            mid_vertices =[]
            vertex = h_cycle[i]
            start = h_cycle[start_i]
            end = h_cycle[end_i]
            cyclic_order = t.cyclic_list[vertex]
            
            index = (cyclic_order.index(start) +1)%len(cyclic_order)
            v = cyclic_order[index]
            
            while v!=end:
                mid_vertices.append(v)
                index = (index+1)%len(cyclic_order)
                v = cyclic_order[index]
            for j in range(len(mid_vertices)):
                cyclic_order.remove(mid_vertices[j])
            
            g1[vertex] = cyclic_order
            cyclic_order = [start]
            for j in range(len(mid_vertices)):
                cyclic_order.append(mid_vertices[j])
            cyclic_order.append(end)
            g2[vertex] = cyclic_order
        
        v = 0
        for i in range(1,len(g1)+1):
            cyclic_order = g1[i]
            if len(cyclic_order) == 2:
                v = i
                break
        
        g2_edges = self.find_edges(g2)
        
#         From here it starts to make v dominant in G2
        while(true):
            if len(g2[v]) == (len(t.vertices) - 1): 
                break
            edge = self.find_flipable_edge(g2[v], h_cycle_edges, g2_edges)
            x_cyc = g2[edge[0]]
            y_cyc = g2[edge[1]]
            cmn_ver = list(set(x_cyc) & set(y_cyc))
            cmn_ver.remove(v)
            if (len(cmn_ver) == 1):
                z = cmn_ver[0]
            else:
                z = self.find_z(cmn_ver,g2,edge, v)
            
            g2[edge[0]].remove(edge[1])
            g2[edge[1]].remove(edge[0])
            g2_edges.remove(edge)
            
#             adding z in cyclic list of v
            a_i = g2[v].index(edge[0])
            b_i = g2[v].index(edge[1])
            mx = max(a_i, b_i)
            if (a_i == 0 or b_i == 0) and (a_i == len(g2[v])-1 or b_i == len(g2[v])-1) :
                g2[v].append(z)
            else:
                g2[v].insert(mx, z)
            
#             adding v in cyclic list of z
            a_i = g2[z].index(edge[0])
            b_i = g2[z].index(edge[1])
            mx = max(a_i, b_i)
            if (a_i == 0 or b_i == 0) and (a_i == len(g2[v])-1 or b_i == len(g2[v])-1) :
                g2[z].append(v)
            else:
                g2[z].insert(mx, v)
            
            if v > z:
                n_edge = (z,v)
            else:
                n_edge = (v,z)
            g2_edges.append(n_edge)
            flip_seq.append(edge)
        
        nbr = g1[v]
        
        if nbr[0] > nbr[1]:
            n_border = (nbr[1], nbr[0])
        else:
            n_border = (nbr[0], nbr[1])
        
        h_cycle_edges.append(n_border)
        
        g1[nbr[0]].remove(v)
        g1[nbr[1]].remove(v)
        g1.pop(v, None)
        
        v = 0
        for i in g1:
            if len(g1[i]) > 3:
                v = i
                break
        
        g1_edges = self.find_edges(g1)
#         From here it starts to make v dominant in G1
        while(true):
            if len(g1[v]) == (len(g1) - 1): 
                break
            edge = self.find_flipable_edge(g1[v], h_cycle_edges, g1_edges)
          
            x_cyc = g1[edge[0]]
            y_cyc = g1[edge[1]]
            cmn_ver = list(set(x_cyc) & set(y_cyc))
          
            cmn_ver.remove(v)
            if (len(cmn_ver) == 1):
                z = cmn_ver[0]
            else:
                z = self.find_z(cmn_ver,g1,edge, v)
      
            g1[edge[0]].remove(edge[1])
            g1[edge[1]].remove(edge[0])
            g1_edges.remove(edge)
            
#             adding z in cyclic list of v
            a_i = g1[v].index(edge[0])
            b_i = g1[v].index(edge[1])
            mx = max(a_i, b_i)
            if (a_i == 0 or b_i == 0) and (a_i == len(g1[v])-1 or b_i == len(g1[v])-1) :
                g1[v].append(z)
            else:
                g1[v].insert(mx, z)
            
#             adding v in cyclic list of z
            a_i = g1[z].index(edge[0])
            b_i = g1[z].index(edge[1])
            mx = max(a_i, b_i)
            if (a_i == 0 or b_i == 0) and (a_i == len(g1[v])-1 or b_i == len(g1[v])-1) :
                g1[z].append(v)
            else:
                g1[z].insert(mx, v)
            
            if v > z:
                n_edge = (z,v)
            else:
                n_edge = (v,z)
            g1_edges.append(n_edge)
            flip_seq.append(edge)
            
        
        return flip_seq
        
        
    
    def find_z(self, cmn_ver, cyclic_list, edge, v):
        star = 0
        end = 0
        for i in range(len(cyclic_list[v])):
            if edge[0] == cyclic_list[v][i]:
                if edge[1] == cyclic_list[v][(i+1)%len(cyclic_list[v])] :
                    start = edge[1]
                    end = edge[0]
                    break
            elif edge[1] == cyclic_list[v][i]:
                if edge[0] == cyclic_list[v][(i+1)%len(cyclic_list)] :
                    start = edge[0]
                    end = edge[1]
                    break
        for i in range(len(cmn_ver)):
            cyclic_order = cyclic_list[cmn_ver[i]]
            for j in range(len(cyclic_order)):
                if satrt == cyclic_order[j] and end == cyclic_order[(j+1)%len(cyclic_order)]:
                    return cmn_ver[i]
    
    
    def find_flipable_edge(self,cyclic_order, h_cycle_edges, edges):
        for i in range(len(cyclic_order)):
            x = cyclic_order[i]
            y = cyclic_order[(i+1)%len(cyclic_order)]
            
            if x>y: 
                [x,y] = self.swap(x,y)
            edge = (x,y)
            if not(edge in h_cycle_edges) and (edge in edges):
                return edge
            
        
    
    
    def find_edges(self,cyclic_order):
        edges = []
        for i in cyclic_order:
            cyclic_list = cyclic_order[i]
            for j in range(len(cyclic_list)):
                x = cyclic_list[j]
                y = i
                if x>y:
                    [x,y] = self.swap(x,y)
                edge = (x,y)
                if not (edge in edges):
                    edges.append(edge)
        return edges
    
    def swap(self, x, y):
        temp = x
        x = y
        y = temp
        return [x,y]
    
    def hamiltonian_cycle(self, t, h_cycle):
        if len(h_cycle) == 0:
            h_cycle = [1]
            h_cycle = self.hamiltonian_cycle(t, h_cycle)
            if len(h_cycle) == len(t.vertices):
                return h_cycle
            else:
                return []
        if len(h_cycle) == len(t.vertices):
            x = h_cycle[0]
            y = h_cycle[len(h_cycle)-1]
            
            if x>y:
                temp = y
                y = x
                x = temp
            
            if (x,y) in t.edges:
                return h_cycle
            else:
                h_cycle.pop()
                return h_cycle
        
        index = len(h_cycle)-1
        for i in range(1,len(t.vertices)+1):
            if i in h_cycle:
                continue
            x = h_cycle[index]
            y = i
            
            if x>y:
                temp = y
                y = x
                x = temp
            if (x,y) in t.edges:
                h_cycle.append(i)
                h_cycle = self.hamiltonian_cycle(t,h_cycle)
                if len(h_cycle) == len(t.vertices):
                    return h_cycle
            
        h_cycle.pop()
        return h_cycle
    
    def find_separating_triangle(self,t1):

#     ===============================    
#         print(t1.faces)

        checked_nodes = [t1.external_face[0]]
        pending_nodes = [t1.external_face[0]]
        processed_nodes = []
        while (len(pending_nodes)!=0):
            node = pending_nodes.pop(0)
            node_cyclic_order = t1.cyclic_list[node]
            
#             =====================================================
#             print(node_cyclic_order)
            
            [pending_nodes, checked_node] = self.update_node_list(pending_nodes,checked_nodes,node_cyclic_order)
            st = []
            len_st = 0
            sv = []
            
            for i in range(0,len(node_cyclic_order)-1,1):
                for j in range(len(node_cyclic_order), i+1, -1):
                    u = node_cyclic_order[i]
                    v = node_cyclic_order[j-1]
                    edge = [u,v]
                    edge.sort()
                    if not ((edge[0],edge[1]) in t1.edges):
                        continue
                    triangle = [node,u, v]
                    triangle.sort()
                    if triangle in t1.faces:
                        continue
                    
                    length = len(node_cyclic_order) - (j-i)
                    start = node_cyclic_order.index(u)
                    end = node_cyclic_order.index(v)
                    separated_vertices = node_cyclic_order[start+1:end]
                    for w in separated_vertices:
                        if (w in t1.external_face) or (w in processed_nodes):
                            separated_vertices = self.update_separated_vertices(node_cyclic_order,separated_vertices,[u,v])
                            break
                        
                    
                    
                    if len(separated_vertices)>len_st:
                        st = [node,u,v]
                        sv = separated_vertices.copy()
                        st.sort()
                        len_st = len(separated_vertices)
#                     print(str(triangle) + " ----> " + str(separated_vertices))
#                     print("separated vertices = " + str(separated_vertices))
#             return
            processed_nodes.append(node)
            if not(len_st == 0):
                return [st,sv]
        return []
            
    
    def update_node_list(self,pending_node,checked_node,node_cyclic_order):
        for u in node_cyclic_order:
            if not(u in checked_node):
                pending_node.append(u)
                checked_node.append(u)
        
        return [pending_node, checked_node]
    
    
    def update_separated_vertices(self,node_cyclic_order,l2,l3):
        separated_vertices = node_cyclic_order.copy()
        for i in l2:
            separated_vertices.remove(i)
        for i in l3:
            separated_vertices.remove(i)
        return separated_vertices
            
        
    
    def decompose(self,t1):
        result = self.find_separating_triangle(t1)
        tao = []
        subgraphs = []
        while not(result==[]):
            st = result[0]
            sv = result[1]
#             print(st)
            t1.remove_vertices(sv)
            tao.append(st)
            subgraph = sv.copy()
            subgraph.append(st[0])
            subgraph.append(st[1])
            subgraph.append(st[2])
            subgraphs.append(subgraph)
            result = self.find_separating_triangle(t1)
        return t1,tao,subgraphs
            
            
    def four_block_tree(self,t1):
        fbt = Graph()
        triangulation_queue = []
        t2 = t1.copy()
        fb1,tao,sub_triangulations = self.decompose(t2)
        fb1.g.show()
        if len(tao)==0:
            return fb1
        
        for child in sub_triangulations:
            sub_triangulation = t1.sub_triangulation(child)
            triangulation_queue.append(sub_triangulation)
            



#---------Driver Code---------
# for n in range(7,61):
n = 32
worst = 5*n - 23
print("worst case for " + str(n) + " is " + str(worst))
a = 0
b = 0
c = Cardinal()
num_of_total_flips = []
for i in range(10):

#     if i%10==0:
#         print("Iteration No: " + str(i) + " ---> Required flip: " + str(num))

    rt = RandomTriangulation()
    t1 = Triangulation(rt.generate_triangulation(n))
    t2 = Triangulation(rt.generate_triangulation(n))
    num = c.show_transformation(t1,t2)
    if num!=0:
        num_of_total_flips.append(num)

    print("Iteration No: " + str(i+1) + " ---> Required flip: " + str(num))
avg = statistics.mean(num_of_total_flips)
print("For " + str(n) + " -----> " + str(avg))
print()
